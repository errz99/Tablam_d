/*
			//ListG children = this.getChildren();
			//auto box = children.nthData(_position);
			//Widget[] boxes = children.toArray();


			//auto box = children.nthData(_position);
			//cast(Widget) box.destroy();
			//cast(Widget[]) children;

			//this.remove(cast(Widget) box);
			//this.remove(cast(Widget) children.nth(_position));

			//foreach(Widget child.tupleof; children) {
			//	this.remove(child);
			//}

			//auto box = children.nthData(_position);

			//this.destroy(box.data);

			//this.setChildren(children);

			//Box[] boxes = children.toArray();
			//children.free();

			//this.remove(children.nth(_position));
			//this.remove(_position);

			//this.removeAll();


			for (int j = 0; j < _data[i].length; j++) {
				row ~= newElemx(_data[i][j], max[j]);
//				auto elemgr = _data[i][j].byGrapheme;
//				ulong grow = max[j] - elemgr.walkLength;
//				string elemx = sep ~ _data[i][j] ~ " ".replicate(grow) ~ sep;
				//row ~= elemx;
			}

		for (int j = 0; j < rdata.length; j++) {
			row ~= newElemx(rdata[j], max[j]);
			//auto elemgr = rdata[j].byGrapheme;
			//ulong grow = max[j] - elemgr.walkLength;
			//string elemx = sep ~ rdata[j] ~ " ".replicate(grow) ~ sep;
			//row ~= elemx;
		}

*/


//		for (int j = 0; j < max.length; j++) {
//			for (int i = 0; i < _data.length; i++) {
//				auto elemgr = _data[i][j].byGrapheme;
//				if (elemgr.walkLength > max[j]) {
//					max[j] = elemgr.walkLength;
//				}
//			}
//		}


//		for (int j = 0; j < max.length; j++) {
//			auto elemgr = rdata[j].byGrapheme;
//			if (elemgr.walkLength > max[j]) {
//				max[j] = elemgr.walkLength;
//				changedMax ~= j;
//			}
//		}


//				if (_hasHead && j == 0) {
//					labels[j][cm].setMarkup(headMarkup[0] ~ elemx ~ headMarkup[1]);
//				} else if (j == position) {
//					labels[j][cm].setMarkup(cursorMarkup[0] ~ elemx ~ cursorMarkup[1]);
//				} else {
//					labels[j][cm].setMarkup(dataMarkup[0] ~ elemx ~ dataMarkup[1]);
//				}

//			auto dataTemp = _data;
//			auto dataxTemp = _datax;
//			reverse(dataTemp);
//			reverse(dataxTemp);
//			_data = [];
//			_data ~= dataTemp[$-1];
//			_data ~= dataTemp[0..$-1];
//			_datax = [];
//			_datax ~= dataxTemp[$-1];
//			_datax ~= dataxTemp[0..$-1];

		auto n = children.length;
		for (int i = start; i < n; i++) {
			reorderChild(children[i + start], cast(int) n - 1 + start);
			--n;
		}


	void activeAndLastMarkup() {
		for (int j = 0; j < _data[0].length; j++) {
			labels[position][j].setMarkup(cursorMarkup[0] ~ _datax[position][j] ~ cursorMarkup[1]);
			labels[lastPosition][j].setMarkup(dataMarkup[0] ~ _datax[lastPosition][j] ~ dataMarkup[1]);
		}
	}

		addEvents(2097152); // SCROLL_MASK

		addOnScroll(delegate bool(Event e, Widget w) {
			writeln("scroll");
//			auto n = to!int(row.getName());
//			if (n != position) {
//				lastPosition = position;
//				position = n;
//				updateCursor();
//			}
			return true;
		});


		//row.addEvents(32); // BUTTON1_MOTION_MASK

//		row.addOnMotionNotify(delegate bool(Event e, Widget w) {
//			writeln("motion notify");
//			auto n = to!int(row.getName());
//			if (n != position) {
//				lastPosition = position;
//				position = n;
//				updateCursor();
//			}
//			return true;
//		});


			foreach (ref child; children) {
				child.destroy();
			}
			children = [];

			foreach (row; rows) {
				children ~= row;
				add(row);
			}

		//if ((_hasHead && rows.length > start) || (!_hasHead && rows.length > start)) {


