/*
			//ListG children = this.getChildren();
			//auto box = children.nthData(_position);
			//Widget[] boxes = children.toArray();


			//auto box = children.nthData(_position);
			//cast(Widget) box.destroy();
			//cast(Widget[]) children;

			//this.remove(cast(Widget) box);
			//this.remove(cast(Widget) children.nth(_position));

			//foreach(Widget child.tupleof; children) {
			//	this.remove(child);
			//}

			//auto box = children.nthData(_position);

			//this.destroy(box.data);

			//this.setChildren(children);

			//Box[] boxes = children.toArray();
			//children.free();

			//this.remove(children.nth(_position));
			//this.remove(_position);

			//this.removeAll();


			for (int j = 0; j < _data[i].length; j++) {
				row ~= newElemx(_data[i][j], max[j]);
//				auto elemgr = _data[i][j].byGrapheme;
//				ulong grow = max[j] - elemgr.walkLength;
//				string elemx = sep ~ _data[i][j] ~ " ".replicate(grow) ~ sep;
				//row ~= elemx;
			}

		for (int j = 0; j < rdata.length; j++) {
			row ~= newElemx(rdata[j], max[j]);
			//auto elemgr = rdata[j].byGrapheme;
			//ulong grow = max[j] - elemgr.walkLength;
			//string elemx = sep ~ rdata[j] ~ " ".replicate(grow) ~ sep;
			//row ~= elemx;
		}

*/


//		for (int j = 0; j < max.length; j++) {
//			for (int i = 0; i < _data.length; i++) {
//				auto elemgr = _data[i][j].byGrapheme;
//				if (elemgr.walkLength > max[j]) {
//					max[j] = elemgr.walkLength;
//				}
//			}
//		}


//		for (int j = 0; j < max.length; j++) {
//			auto elemgr = rdata[j].byGrapheme;
//			if (elemgr.walkLength > max[j]) {
//				max[j] = elemgr.walkLength;
//				changedMax ~= j;
//			}
//		}


//				if (_hasHead && j == 0) {
//					labels[j][cm].setMarkup(headMarkup[0] ~ elemx ~ headMarkup[1]);
//				} else if (j == position) {
//					labels[j][cm].setMarkup(cursorMarkup[0] ~ elemx ~ cursorMarkup[1]);
//				} else {
//					labels[j][cm].setMarkup(dataMarkup[0] ~ elemx ~ dataMarkup[1]);
//				}

//			auto dataTemp = _data;
//			auto dataxTemp = _datax;
//			reverse(dataTemp);
//			reverse(dataxTemp);
//			_data = [];
//			_data ~= dataTemp[$-1];
//			_data ~= dataTemp[0..$-1];
//			_datax = [];
//			_datax ~= dataxTemp[$-1];
//			_datax ~= dataxTemp[0..$-1];

		auto n = children.length;
		for (int i = start; i < n; i++) {
			reorderChild(children[i + start], cast(int) n - 1 + start);
			--n;
		}


	void activeAndLastMarkup() {
		for (int j = 0; j < _data[0].length; j++) {
			labels[position][j].setMarkup(cursorMarkup[0] ~ _datax[position][j] ~ cursorMarkup[1]);
			labels[lastPosition][j].setMarkup(dataMarkup[0] ~ _datax[lastPosition][j] ~ dataMarkup[1]);
		}
	}

		addEvents(2097152); // SCROLL_MASK

		addOnScroll(delegate bool(Event e, Widget w) {
			writeln("scroll");
//			auto n = to!int(row.getName());
//			if (n != position) {
//				lastPosition = position;
//				position = n;
//				updateCursor();
//			}
			return true;
		});


		//row.addEvents(32); // BUTTON1_MOTION_MASK

//		row.addOnMotionNotify(delegate bool(Event e, Widget w) {
//			writeln("motion notify");
//			auto n = to!int(row.getName());
//			if (n != position) {
//				lastPosition = position;
//				position = n;
//				updateCursor();
//			}
//			return true;
//		});


			foreach (ref child; children) {
				child.destroy();
			}
			children = [];

			foreach (row; rows) {
				children ~= row;
				add(row);
			}

		//if ((_hasHead && rows.length > start) || (!_hasHead && rows.length > start)) {


//	private string[] dataxForRow(ref string[] rdata) {
//		auto sep = " ".replicate(separation);
//		int[] changedMax = updateMax([rdata]);
//
//		string[] row;
//		for (int j = 0; j < rdata.length; j++) {
//			row ~= newElemx(rdata[j], max[j]);
//		}
//
//		foreach (cm; changedMax) {
//			writeln(cm);
//			int j;
//			while (j < _data.length) {
//				auto elemgr = _data[j][cm].byGrapheme;
//				ulong grow = max[cm] - elemgr.walkLength;
//				string elemx = sep ~ _data[j][cm] ~ " ".replicate(grow) ~ sep;
//				_datax[j][cm] = elemx;
//				applyMarkup(j, cm, elemx);
//				++j;
//			}
//		}
//		return row;
//	}


//	private string newElemx(ref string elem, ulong max) {
//		auto sep = " ".replicate(separation);
//		auto elemgr = elem.byGrapheme;
//		ulong grow = max - elemgr.walkLength;
//		return sep ~ elem ~ " ".replicate(grow) ~ sep;
//	}

//	private int[] updateMax(string[][] data) {
//		int[] changedMax;
//
//		for (int j = 0; j < max.length; j++) {
//			for (int i = 0; i < data.length; i++) {
//				auto elemgr = data[i][j].byGrapheme;
//				if (elemgr.walkLength > max[j]) {
//					max[j] = elemgr.walkLength;
//					changedMax ~= j;
//				}
//			}
//		}
//		return changedMax;
//	}

//	private void initialDatax() {
//		if (_data.length == 0) {
//			return;
//		}
//
//		max.length = _data[0].length;
//		updateMax(_data);
//		int i;
//		while (i < _data.length) {
//			string[] row;
//
//			for (int j = 0; j < _data[i].length; j++) {
//				row ~= newElemx(_data[i][j], max[j]);
//			}
//			_datax ~= row;
//			++i;
//		}
//	}

//	private void processRow(ref string[] rdatax, int idx) {
//		auto row = new Box(Orientation.HORIZONTAL, hsep);
//		row.setName(to!string(idx));
//		add(row);
//
//		row.addOnButtonPress(delegate bool(Event e, Widget w) {
//			auto eb = e.button();
//			auto name = row.getName();
//
//			if (to!int(name) > outPosition) {
//				if (e.isDoubleClick(eb)) {
//				} else if (position != to!int(name)) {
//					lastPosition = position;
//					position = to!int(name);
//					updateCursor();
//				}
//			} else {
//				//writeln("button pressed at header");
//			}
//			return false;
//		});
//
//		Label[] rowLabels;
//		foreach (ref elemx; rdatax) {
//			auto ebox = new EventBox();
//			row.add(ebox);
//			auto label = new Label(elemx);
//			label.setMarkup(dataMarkup[0] ~ elemx ~ dataMarkup[1]);
//			ebox.add(label);
//			rowLabels ~= label;
//		}
//		rows ~= row;
//		labels ~= rowLabels;
//	}


//		int len = cast(int) rbs.length;
//		int x = 1;
//		for (int i = outPosition + 1; i < rbs.length; i++) {
//			int z = len - x;
//			for (int j = 0; j < rbs[z].labels.length; j++) {
//				applyMarkup(i, j, rbs[z].datax[j]);
//
//			}
//			x++;
//		}


	void deleteActiveRow() {
		//if (rbs.length > outPosition + 1) {	
		if (position > outPosition && position < rbs.length) {			
//			rbs = [];
//			data = [];
//			datax = [];
//			
//			foreach (child; children) {
//				child.destroy();
//			}	
//			children = [];
//			
//			writeln(rbs.length, data.length, datax.length, children.length);


			//auto widget = children[position];
			//children[position].unrealize();
			//children[position].destroy();
			//remove(children[position]);
			//widget.unrealize();
			//children = children[0..position] ~ children[position + 1..$];

			//datax ~= mb.sep ~ data[i] ~ " ".replicate(grow) ~ mb.sep;

//			if (mb.halign == "left") {
//				datax ~= mb.sep ~ data[i] ~ " ".replicate(grow) ~ mb.sep;
//			} else if (mb.halign == "rigth") {
//				datax ~= mb.sep ~ " ".replicate(grow) ~ data[i] ~ mb.sep;
//			}	

//				if (halign == "left") {
//					elemx = sep ~ rbs[j].data[cm] ~ " ".replicate(grow) ~ sep;
//				} else if (halign == "rigth") {
//					elemx = sep ~ " ".replicate(grow) ~ rbs[j].data[cm] ~ sep;
//				}	
